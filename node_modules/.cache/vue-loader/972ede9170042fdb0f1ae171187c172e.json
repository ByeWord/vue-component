{"remainingRequest":"C:\\Users\\WeChain\\Documents\\Programs\\Vue\\vue-component\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\WeChain\\Documents\\Programs\\Vue\\vue-component\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\WeChain\\Documents\\Programs\\Vue\\vue-component\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\WeChain\\Documents\\Programs\\Vue\\vue-component\\src\\App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"C:\\Users\\WeChain\\Documents\\Programs\\Vue\\vue-component\\src\\App.vue","mtime":1584426816549},{"path":"C:\\Users\\WeChain\\Documents\\Programs\\Vue\\vue-component\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\WeChain\\Documents\\Programs\\Vue\\vue-component\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\WeChain\\Documents\\Programs\\Vue\\vue-component\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\WeChain\\Documents\\Programs\\Vue\\vue-component\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}